// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dotnetusers.Domain;

#nullable disable

namespace dotnetusers.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525072840_AlterUsuarioImageUrl")]
    partial class AlterUsuarioImageUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoleUsuario", b =>
                {
                    b.Property<int>("Roleid")
                        .HasColumnType("integer");

                    b.Property<int>("Usuarioid")
                        .HasColumnType("integer");

                    b.HasKey("Roleid", "Usuarioid");

                    b.ToTable("RoleUsuario");
                });

            modelBuilder.Entity("TrackGenres", b =>
                {
                    b.Property<int>("TrackId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("TrackId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("track_genres", (string)null);
                });

            modelBuilder.Entity("Usuariorole", b =>
                {
                    b.Property<int>("Usuarioid")
                        .HasColumnType("integer")
                        .HasColumnName("usuarioid");

                    b.Property<int>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Usuarioid", "Roleid")
                        .HasName("usuarioroles_pkey");

                    b.HasIndex(new[] { "Roleid" }, "ix_usuarioroles_roleid");

                    b.ToTable("usuarioroles", (string)null);
                });

            modelBuilder.Entity("dotnetusers.Domain.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("dotnetusers.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Nome" }, "roles_nome_key")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("dotnetusers.Domain.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("audio_url");

                    b.Property<int>("Bpm")
                        .HasColumnType("integer")
                        .HasColumnName("bpm");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int?>("KeyId")
                        .HasColumnType("integer")
                        .HasColumnName("track_key_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("tracks", (string)null);
                });

            modelBuilder.Entity("dotnetusers.Domain.TrackKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("track_keys", (string)null);
                });

            modelBuilder.Entity("dotnetusers.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Passwordhashed")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("passwordhashed");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.HasKey("Id")
                        .HasName("usuarios_pkey");

                    b.HasIndex(new[] { "Email" }, "usuarios_email_key")
                        .IsUnique();

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("TrackGenres", b =>
                {
                    b.HasOne("dotnetusers.Domain.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetusers.Domain.Track", null)
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Usuariorole", b =>
                {
                    b.HasOne("dotnetusers.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("usuarioroles_roleid_fkey");

                    b.HasOne("dotnetusers.Domain.Usuario", null)
                        .WithMany()
                        .HasForeignKey("Usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("usuarioroles_usuarioid_fkey");
                });

            modelBuilder.Entity("dotnetusers.Domain.Track", b =>
                {
                    b.HasOne("dotnetusers.Domain.TrackKeys", "Key")
                        .WithMany("TracksInThisKey")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotnetusers.Domain.Usuario", "Usuario")
                        .WithMany("UserTracks")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Key");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("dotnetusers.Domain.TrackKeys", b =>
                {
                    b.Navigation("TracksInThisKey");
                });

            modelBuilder.Entity("dotnetusers.Domain.Usuario", b =>
                {
                    b.Navigation("UserTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
